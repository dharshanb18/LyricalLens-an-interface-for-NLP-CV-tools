# -*- coding: utf-8 -*-
"""text to emotion lstm 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DxLkZZzS-wvHaiJfYU_7HxY-pFyh2QAa
"""

import pandas as pd
import numpy as np
import keras
import tensorflow
from keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Embedding, Flatten, Dense
from keras.layers import LSTM
from keras.models import load_model

from pytesseract import pytesseract
import os




tokenizer = Tokenizer()
label_encoder = LabelEncoder()


class OCR:
    def __init__(self):
        self.path = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

    def extract(self, filename):
        try:
            pytesseract.tesseract_cmd = self.path
            text = pytesseract.image_to_string(filename)
            return text
        except Exception as e:
            print(e)
            return "error"

# Load the sentiment analysis model
loaded_model = load_model("my_modellstm1.h5")

ocr = OCR()
text = ocr.extract(r"C:\Users\Jovan\Desktop\french.jpg")



data = pd.read_csv("train.txt", sep=';')
data.columns = ["Text", "Emotions"]
print(data.head())

#from google.colab import drive
#drive.mount('/content/drive')

# from google.colab import drive
# drive.mount('/content/drive')

texts = data["Text"].tolist()
labels = data["Emotions"].tolist()

# Tokenize the text data
tokenizer = Tokenizer()
tokenizer.fit_on_texts(texts)

sequences = tokenizer.texts_to_sequences(texts)
max_length = max([len(seq) for seq in sequences])
padded_sequences = pad_sequences(sequences, maxlen=max_length)

sequences = tokenizer.texts_to_sequences(texts)

padded_sequences

# Encode the string labels to integers
label_encoder = LabelEncoder()
labels = label_encoder.fit_transform(labels)

# One-hot encode the labels
one_hot_labels = keras.utils.to_categorical(labels)

one_hot_labels

# Split the data into training and testing sets
xtrain, xtest, ytrain, ytest = train_test_split(padded_sequences,
                                                one_hot_labels,
                                                test_size=0.2)

one_hot_labels[0]

# # Define the model
# model = Sequential()
# model.add(Embedding(input_dim=len(tokenizer.word_index) + 1,
#                     output_dim=128, input_length=max_length))
# model.add(Flatten())
# model.add(Dense(units=128, activation="relu"))
# model.add(Dense(units=len(one_hot_labels[0]), activation="softmax"))

# model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])
# model.fit(xtrain, ytrain, epochs=10, batch_size=32, validation_data=(xtest, ytest))

from keras.regularizers import l2
from keras.layers import Dropout

# Define the model with LSTM layers, Dropout, and L2 regularization
model = Sequential()
model.add(Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=128, input_length=max_length))
model.add(LSTM(128, return_sequences=True, kernel_regularizer=l2(0.01), recurrent_regularizer=l2(0.01)))
model.add(Dropout(0.5))
model.add(LSTM(64, kernel_regularizer=l2(0.01), recurrent_regularizer=l2(0.01)))
model.add(Dropout(0.5))
model.add(Dense(units=len(one_hot_labels[0]), activation="softmax", kernel_regularizer=l2(0.01)))

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])
#model.fit(xtrain, ytrain, epochs=30, batch_size=32, validation_data=(xtest, ytest))

input_text = text
modelnew=load_model('my_modellstm1.h5')

# Preprocess the input text
input_sequence = tokenizer.texts_to_sequences([input_text])
padded_input_sequence = pad_sequences(input_sequence, maxlen=max_length)
prediction = modelnew.predict(padded_input_sequence)
predicted_label = label_encoder.inverse_transform([np.argmax(prediction[0])])
print(predicted_label[0])

# Save the model to disk
#model.save("my_modellstm1.h5")